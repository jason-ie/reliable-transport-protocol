#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, sys

DATA_SIZE = 1375
BASE_RTT = 1.0  # Base RTT estimate
MAX_RTT = 5.0  # Reasonable maximum RTT to avoid indefinite waiting but still attempt retransmission

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.socket.settimeout(0.5)  # Short timeout for ACK checks
        self.seq_num = 0
        self.window = []  # Format: [(seq_num, data, send_time, ack_received, resend_attempts), ...]

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send_packet(self, packet, initial_send=True, index=None):
        self.socket.sendto(json.dumps(packet).encode('utf-8'), (self.host, self.remote_port))
        if initial_send:
            self.window.append((packet['seq'], packet['data'], time.time(), False, 0))
        else:
            attempts = self.window[index][4] + 1
            self.window[index] = (packet['seq'], packet['data'], time.time(), False, attempts)

    def resend_packets(self):
        current_time = time.time()
        for index, (seq, data, send_time, ack_received, attempts) in enumerate(self.window):
            rtt_adjustment = BASE_RTT + (0.5 * attempts)
            rtt = min(rtt_adjustment, MAX_RTT)  # Adjust for the increasing RTT up to a max
            if not ack_received and current_time - send_time > rtt:
                self.log(f"Resending message with seq {seq} due to timeout, attempt {attempts + 1}")
                self.send_packet({"type": "msg", "seq": seq, "data": data}, initial_send=False, index=index)

    def receive_ack(self):
        while True:
            try:
                data, _ = self.socket.recvfrom(1024)
                ack = json.loads(data.decode('utf-8'))
                if ack["type"] == "ack":
                    for index, (seq, data, send_time, ack_received, attempts) in enumerate(self.window):
                        if seq == ack["seq"]:
                            self.window[index] = (seq, data, send_time, True, attempts)
                            self.log(f"Received ACK for seq {seq}")
                            break
                    # Cleanly remove acknowledged packets
                    self.window = [pkt for pkt in self.window if not pkt[3]]
                    break
            except socket.timeout:
                self.resend_packets()
                break

    def run(self):
        while True:
            data = sys.stdin.read(DATA_SIZE)
            if not data:
                self.log("All data read. Waiting for remaining ACKs.")
                break

            packet = {"type": "msg", "seq": self.seq_num, "data": data}
            self.send_packet(packet)
            self.seq_num += 1

            if len(self.window) >= 4:
                self.receive_ack()

        while self.window:
            self.receive_ack()

        self.log("Transmission complete.")
        sys.exit(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
