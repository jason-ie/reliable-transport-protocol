#!/usr/bin/env -S python3 -u

import argparse, socket, json, sys, select

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.remote_host = None
        self.remote_port = None
        self.seq_num = 0
        self.buffered_packets = {}  # Buffer for out-of-order packets

    def checksum(self, message):
        """
        Calculate the checksum of a message.
        The checksum is the sum of the ASCII values of the characters in the JSON representation of the message, modulo 256.
        """
        return sum(json.dumps(message).encode('utf-8')) % 256

    def send(self, message):
        # Starter code
        message['c'] = self.checksum(message)
        self.log("Sending message: %s" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        # Starter code
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def process_buffered_packets(self):
        """
        Process any buffered packets that can now be processed in sequence.
        If the sequence number of a packet is in the buffered packets, the packet is printed to stdout and removed from the 
        buffered packets. The sequence number is then incremented.
        """ 
        while self.seq_num in self.buffered_packets:
            print(self.buffered_packets.pop(self.seq_num), end="", flush=True)
            self.seq_num += 1

    def run(self): 
        """
        The main loop of the receiver.
        The receiver continuously checks for incoming packets.
        If a packet is received, the checksum of the packet is checked. If the checksum does not match the calculated checksum, 
        the packet is ignored and the next packet is processed.
        If the checksum matches, the packet is added to the buffered packets.
        An acknowledgement is then sent for the packet. If the packet contains a 'num' field, this is included in the 
        acknowledgement. If the 'num' field is less than the sequence number, it is included as is, otherwise it is negated.
        Any buffered packets that can now be processed in sequence are then processed.
        """
        while True:
            sockets = select.select([self.socket], [], [])[0]
            for connection in sockets:
                data, addr = connection.recvfrom(65535)
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))
                self.log(f"Received message with seq {msg['seq']}")
                
                checksum = msg.pop('c', -1)
                
                if (checksum == -1 or checksum != self.checksum(msg)):
                    self.log(f"Checksum failed for seq {msg['seq']}")
                    continue
            
                self.buffered_packets[msg["seq"]] = msg["data"]
                
                ack = {"type": "ack", "seq": msg["seq"]}
                
                if 'num' in msg:
                    if msg['num'] < self.seq_num:
                        ack['num'] = msg['num']
                    else:
                        ack["num"] = msg["num"] * -1
                        
                self.send(ack)
                        
                self.process_buffered_packets()


if __name__ == "__main__":
    receiver = Receiver()
    receiver.run()
