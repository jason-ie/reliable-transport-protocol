#!/usr/bin/env -S python3 -u

import argparse, socket, json, sys

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.remote_host = None
        self.remote_port = None
        self.last_seq_num = -1
        self.buffered_packets = {}  # Buffer for out-of-order packets

    def send_ack(self, seq):
        ack_msg = {"type": "ack", "seq": seq}
        self.socket.sendto(json.dumps(ack_msg).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def process_packet(self, msg):
        # Process in-order packet
        self.last_seq_num = msg["seq"]
        self.log(f"Received data message with seq {msg['seq']}")
        print(msg["data"], end='', flush=True)
        # Send ACK for the highest in-order packet
        self.send_ack(self.last_seq_num)

    def process_buffered_packets(self):
        # Process any buffered packets that can now be processed in sequence
        while self.last_seq_num + 1 in self.buffered_packets:
            next_seq = self.last_seq_num + 1
            self.process_packet({"seq": next_seq, "data": self.buffered_packets.pop(next_seq)})

    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            if self.remote_host is None:
                self.remote_host = addr[0]
                self.remote_port = addr[1]

            msg = json.loads(data.decode('utf-8'))
            if msg["seq"] > self.last_seq_num + 1:
                # Buffer out-of-order packet
                self.buffered_packets[msg["seq"]] = msg["data"]
                self.log(f"Buffering out-of-order packet with seq {msg['seq']}")
            elif msg["seq"] == self.last_seq_num + 1:
                # Process in-order packet and then check for buffered packets
                self.process_packet(msg)
            self.process_buffered_packets()

if __name__ == "__main__":
    receiver = Receiver()
    receiver.run()
